Árvore Binária
https://www.baeldung.com/java-binary-tree
https://github.com/eugenp/tutorials/tree/master/data-structures/src/main/java/com/baeldung/tree

maior ou igual aos valores dos nós da subárvore esquerda
menor ou igual aos valores dos nós da subárvore direita

class Node {
    int value;
    Node left;
    Node right;

    Node(int value) {
        this.value = value;
        right = null;
        left = null;
    }
}

Inserindo Elementos (Inserting Elements)
+++++++++++++++++++++++++++++++++++++++++++++++++++++
se o valor do novo nó for menor que o do nó atual, vamos para o filho esquerdo
se o valor do novo nó for maior que o do nó atual, vamos para o filho direita
quando o nó atual é nulo, chegamos a um nó folha e podemos inserir o novo nó nessa posição

private Node addRecursive(Node current, int value) {
    if (current == null) {
        return new Node(value);
    }

    if (value < current.value) {
        current.left = addRecursive(current.left, value);
    } else if (value > current.value) {
        current.right = addRecursive(current.right, value);
    } else {
        // value already exists
        return current;
    }

    return current;
}

inicia a recursão a partir do nó raiz

public void add(int value) {
    root = addRecursive(root, value);
}

Usando o método 

private BinaryTree createBinaryTree() {
    BinaryTree bt = new BinaryTree();

    bt.add(6);
    bt.add(4);
    bt.add(8);
    bt.add(3);
    bt.add(5);
    bt.add(7);
    bt.add(9);

    return bt;
}

Encontrar um elemento (Finding an Element)
+++++++++++++++++++++++++++++++
método recursivo que percorre a árvore

private boolean containsNodeRecursive(Node current, int value) {
    if (current == null) {
        return false;
    } 
    if (value == current.value) {
        return true;
    } 
    return value < current.value
      ? containsNodeRecursive(current.left, value)
      : containsNodeRecursive(current.right, value);
}

Aqui estamos procurando o valor comparando-o com o valor no nó atual; então continuaremos no filho esquerdo ou direito, dependendo do resultado.

método público que começa na raiz

public boolean containsNode(int value) {
    return containsNodeRecursive(root, value);
}

verificar se a árvore realmente contém os elementos inseridos

@Test
public void givenABinaryTree_WhenAddingElements_ThenTreeContainsThoseElements() {
    BinaryTree bt = createBinaryTree();

    assertTrue(bt.containsNode(6));
    assertTrue(bt.containsNode(4));
 
    assertFalse(bt.containsNode(1));
}


Excluindo um elemento (Deleting an Element)
++++++++++++++++++++++++++++++++++++

Primeiro, temos que encontrar o nó a ser excluído de maneira semelhante à anterior:

private Node deleteRecursive(Node current, int value) {
    if (current == null) {
        return null;
    }

    if (value == current.value) {
        // Node to delete found
        // ... code to delete the node will go here
    } 
    if (value < current.value) {
        current.left = deleteRecursive(current.left, value);
        return current;
    }
    current.right = deleteRecursive(current.right, value);
    return current;
}

Depois de encontrar o nó para excluir, existem 3 casos principais diferentes:

--- um nó não tem filhos – este é o caso mais simples; só precisamos substituir este nó por nulo em seu nó pai

if (current.left == null && current.right == null) {
    return null;
}

--- um nó tem exatamente um filho – no nó pai, substituímos esse nó por seu único filho.

if (current.right == null) {
    return current.left;
}

if (current.left == null) {
    return current.right;
}

--- um nó tem dois filhos – este é o caso mais complexo porque requer uma reorganização da árvore

private int findSmallestValue(Node root) {
    return root.left == null ? root.value : findSmallestValue(root.left);
}

--- atribuímos o menor valor ao nó a ser excluído e, depois disso, o excluímos da subárvore direita:

int smallestValue = findSmallestValue(current.right);
current.value = smallestValue;
current.right = deleteRecursive(current.right, smallestValue);
return current;

método público que inicia a exclusão da raiz 

public void delete(int value) {
    root = deleteRecursive(root, value);
}

Test

@Test
public void givenABinaryTree_WhenDeletingElements_ThenTreeDoesNotContainThoseElements() {
    BinaryTree bt = createBinaryTree();

    assertTrue(bt.containsNode(9));
    bt.delete(9);
    assertFalse(bt.containsNode(9));
}

Pesquisa em profundidade (Depth-First Search)
+++++++++++++++++++++++++++++++++++++++++++++++

Existem várias maneiras de realizar uma busca em profundidade: em ordem, pré-ordem e pós-ordem.

--- A travessia em ordem consiste em primeiro visitar a subárvore esquerda, depois o nó raiz e, finalmente, a subárvore direita:

public void traverseInOrder(Node node) {
    if (node != null) {
        traverseInOrder(node.left);
        System.out.print(" " + node.value);
        traverseInOrder(node.right);
    }
}

mostrará a travessia em ordem

3 4 5 6 7 8 9

--- O percurso de pré-ordem visita primeiro o nó raiz, depois a subárvore esquerda e, finalmente, a subárvore direita:

public void traversePreOrder(Node node) {
    if (node != null) {
        System.out.print(" " + node.value);
        traversePreOrder(node.left);
        traversePreOrder(node.right);
    }
}

--- A travessia pós-ordem visita a subárvore esquerda, a subárvore direita e o nó raiz no final:

public void traversePostOrder(Node node) {
    if (node != null) {
        traversePostOrder(node.left);
        traversePostOrder(node.right);
        System.out.print(" " + node.value);
    }
}

--- 

Pesquisa em largura (Breadth-First Search)

visita todos os nós de um nível antes de ir para o próximo nível 
ordem de nível e visita todos os níveis da árvore começando pela raiz e da esquerda para a direita.

Para a implementação, usaremos uma Fila para manter os nós de cada nível em ordem. Extrairemos cada nó da lista, imprimiremos seus valores e adicionaremos seus filhos à fila:


public void traverseLevelOrder() {
    if (root == null) {
        return;
    }

    Queue<Node> nodes = new LinkedList<>();
    nodes.add(root);

    while (!nodes.isEmpty()) {

        Node node = nodes.remove();

        System.out.print(" " + node.value);

        if (node.left != null) {
            nodes.add(node.left);
        }

        if (node.right != null) {
            nodes.add(node.right);
        }
    }
}

Neste caso, a ordem dos nós será: 6 4 8 3 5 7 9







